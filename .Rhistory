gameNames <- databaseDesigner.getContent(gameNameTableId, gameLabel, pageCount)
dfWithLabels = merge(x = dfWithLabels, y = gameNames, by.x = "Game_Name",
by.y = "Id", all.x = TRUE)
# Optionally, reorder the columns
#dfWithLabels = dfWithLabels[,c(1,ncol(dfWithLabels),3:ncol(dfWithLabels) - 1)]
View(dfWithLabels)
source("Login.R")
source("DatabaseDesigner.R")
data <- databaseDesigner.getContent(3308, "Promotion_Name_Label")
head(data)
source("Login.R")
source("QuestionDetails.R")
source("SurveyData.R")
source("DatabaseDesigner.R")
# LIST all columns you would like returned else set columns = "" to return all
columns = "<string>Chat_Feedback</string>
<string>Chat_Verbatim</string>
<string>Promotion_Name</string>
<string>Game_Name</string>
<string>ChatMulti</string>"
# Database Designer params
promotionNameTableId = 3308
promotionLabel = "Promotion_Name_Label"
gameNameTableId = 3307
gameLabel = "Game Name Label"
pageCount = 350
# You can optionally create a filter expression to restrict the number of records returned
filter = "NOT ISNULL(Chat_Feedback)"
# Get default survey data, according to columns and filter specified
surveyData <- confirmit.getData(columns, filter)
# Get details of a SINGLE question type e.g Chat_Feedback
ChatFeedbackDetails = confirmit.getQuestionLabels("Chat_Feedback")
# Merge the resulting sets of data
dfWithLabels = merge(x = surveyData, y = ChatFeedbackDetails, by.x = "Chat_Feedback",
by.y = "Chat_Feedback_code", all.x = TRUE)
# You may need to repeat the above 2 for each SINGLE question needed
# Get Promotion list from Database Designer
promotionNames <- databaseDesigner.getContent(promotionNameTableId, promotionLabel, pageCount)
dfWithLabels = merge(x = dfWithLabels, y = promotionNames, by.x = "Promotion_Name",
by.y = "Id", all.x = TRUE)
# Get Game list from Database Designer
gameNames <- databaseDesigner.getContent(gameNameTableId, gameLabel, pageCount)
dfWithLabels = merge(x = dfWithLabels, y = gameNames, by.x = "Game_Name",
by.y = "Id", all.x = TRUE)
# Optionally, reorder the columns
#dfWithLabels = dfWithLabels[,c(1,ncol(dfWithLabels),3:ncol(dfWithLabels) - 1)]
View(dfWithLabels)
source("Login.R")
source("QuestionDetails.R")
source("SurveyData.R")
source("DatabaseDesigner.R")
# LIST all columns you would like returned else set columns = "" to return all
columns = "<string>Chat_Feedback</string>
<string>Chat_Verbatim</string>
<string>Promotion_Name</string>
<string>Game_Name</string>
<string>ChatMulti</string>"
# You can optionally create a filter expression to restrict the number of records returned
filter = "NOT ISNULL(Chat_Feedback)"
# Get default survey data, according to columns and filter specified
surveyData <- confirmit.getData(columns, filter)
# Get details of a SINGLE question type e.g Chat_Feedback
ChatFeedbackDetails = confirmit.getQuestionLabels("Chat_Feedback")
# Merge the resulting sets of data
dfWithLabels = merge(x = surveyData, y = ChatFeedbackDetails, by.x = "Chat_Feedback",
by.y = "Chat_Feedback_code", all.x = TRUE)
# You may need to repeat the above 2 for each SINGLE question needed
# Get Promotion list from Database Designer
promotionNames <- databaseDesigner.getContent(promotionNameTableId, promotionLabel, pageCount)
dfWithLabels = merge(x = dfWithLabels, y = promotionNames, by.x = "Promotion_Name",
by.y = "Id", all.x = TRUE)
# Get Game list from Database Designer
gameNames <- databaseDesigner.getContent(gameNameTableId, gameLabel, pageCount)
dfWithLabels = merge(x = dfWithLabels, y = gameNames, by.x = "Game_Name",
by.y = "Id", all.x = TRUE)
# Optionally, reorder the columns
#dfWithLabels = dfWithLabels[,c(1,ncol(dfWithLabels),3:ncol(dfWithLabels) - 1)]
source("Login.R")
source("QuestionDetails.R")
source("SurveyData.R")
source("DatabaseDesigner.R")
# LIST all columns you would like returned else set columns = "" to return all
columns = "<string>Chat_Feedback</string>
<string>Chat_Verbatim</string>
<string>Promotion_Name</string>
<string>Game_Name</string>
<string>ChatMulti</string>"
# Database Designer params
promotionNameTableId = 3308
promotionLabel = "Promotion_Name_Label"
gameNameTableId = 3307
gameLabel = "Game Name Label"
pageCount = 350
# You can optionally create a filter expression to restrict the number of records returned
filter = "NOT ISNULL(Chat_Feedback)"
# Get default survey data, according to columns and filter specified
surveyData <- confirmit.getData(columns, filter)
# Get details of a SINGLE question type e.g Chat_Feedback
ChatFeedbackDetails = confirmit.getQuestionLabels("Chat_Feedback")
# Merge the resulting sets of data
dfWithLabels = merge(x = surveyData, y = ChatFeedbackDetails, by.x = "Chat_Feedback",
by.y = "Chat_Feedback_code", all.x = TRUE)
# You may need to repeat the above 2 for each SINGLE question needed
# Get Promotion list from Database Designer
promotionNames <- databaseDesigner.getContent(promotionNameTableId, promotionLabel, pageCount)
dfWithLabels = merge(x = dfWithLabels, y = promotionNames, by.x = "Promotion_Name",
by.y = "Id", all.x = TRUE)
# Get Game list from Database Designer
gameNames <- databaseDesigner.getContent(gameNameTableId, gameLabel, pageCount)
dfWithLabels = merge(x = dfWithLabels, y = gameNames, by.x = "Game_Name",
by.y = "Id", all.x = TRUE)
# Optionally, reorder the columns
#dfWithLabels = dfWithLabels[,c(1,ncol(dfWithLabels),3:ncol(dfWithLabels) - 1)]
source("Login.R")
source("QuestionDetails.R")
source("SurveyData.R")
source("DatabaseDesigner.R")
# LIST all columns you would like returned else set columns = "" to return all
columns = "<string>Chat_Feedback</string>
<string>Chat_Verbatim</string>
<string>Promotion_Name</string>
<string>Game_Name</string>
<string>ChatMulti</string>"
# Database Designer params
promotionNameTableId = 3308
promotionLabel = "Promotion_Name_Label"
gameNameTableId = 3307
gameLabel = "Game Name Label"
pageCount = 350
# You can optionally create a filter expression to restrict the number of records returned
filter = "NOT ISNULL(Chat_Feedback)"
# Get default survey data, according to columns and filter specified
surveyData <- confirmit.getData(columns, filter)
# Get details of a SINGLE question type e.g Chat_Feedback
ChatFeedbackDetails = confirmit.getQuestionLabels("Chat_Feedback")
# Merge the resulting sets of data
dfWithLabels = merge(x = surveyData, y = ChatFeedbackDetails, by.x = "Chat_Feedback",
by.y = "Chat_Feedback_code", all.x = TRUE)
# You may need to repeat the above 2 for each SINGLE question needed
# Get Promotion list from Database Designer
promotionNames <- databaseDesigner.getContent(promotionNameTableId, promotionLabel, pageCount)
dfWithLabels = merge(x = dfWithLabels, y = promotionNames, by.x = "Promotion_Name",
by.y = "Id", all.x = TRUE)
# Get Game list from Database Designer
gameNames <- databaseDesigner.getContent(gameNameTableId, gameLabel, pageCount)
dfWithLabels = merge(x = dfWithLabels, y = gameNames, by.x = "Game_Name",
by.y = "Id", all.x = TRUE)
# Optionally, reorder the columns
#dfWithLabels = dfWithLabels[,c(1,ncol(dfWithLabels),3:ncol(dfWithLabels) - 1)]
surveyData <- confirmit.getData(columns, filter)
source("Login.R")
source("QuestionDetails.R")
source("SurveyData.R")
source("DatabaseDesigner.R")
# LIST all columns you would like returned else set columns = "" to return all
columns = "<string>Chat_Feedback</string>
<string>Chat_Verbatim</string>
<string>Promotion_Name</string>
<string>Game_Name</string>
<string>ChatMulti</string>"
source("Login.R")
source("QuestionDetails.R")
source("SurveyData.R")
source("DatabaseDesigner.R")
# LIST all columns you would like returned else set columns = "" to return all
columns = "<string>Chat_Feedback</string>
<string>Chat_Verbatim</string>
<string>Promotion_Name</string>
<string>Game_Name</string>
<string>ChatMulti</string>"
# Database Designer params
promotionNameTableId = 3308
promotionLabel = "Promotion_Name_Label"
gameNameTableId = 3307
gameLabel = "Game Name Label"
pageCount = 350
# You can optionally create a filter expression to restrict the number of records returned
filter = "NOT ISNULL(Chat_Feedback)"
# Get default survey data, according to columns and filter specified
surveyData <- confirmit.getData(columns, filter)
source("Login.R")
source("SurveyData.R")
columns = "<string>Chat_Feedback</string>
<string>Chat_Verbatim</string>
<string>Promotion_Name</string>
<string>Game_Name</string>
<string>ChatMulti</string>"
surveyData = confirmit.getData(columns, "NOT ISNULL(Chat_Feedback)")
surveyData
confirmit.getData <- function(columns, filterExp){
library("httr")
library(XML)
library(htmltools)
key <- confirmit.login(myusername, mypassword, environment)
url = paste("https://ws.",environment,".confirmit.com/confirmit/webservices/current/DataTransfer.asmx", sep="")
body = paste('<soap:Envelope ',soapSchemas, confirmitSchema85, '>
<soap:Header/>
<soap:Body>
<GetData>
<key>',key,'</key>
<dataTransferDef xsi:type="SurveyDataTransferDef">
<ProjectId>',surveyid, '</ProjectId>
<DbType>Production</DbType>
<VariableCollections>
<TransferVariableCollection>
<LoopId>responseid</LoopId>
<VariableNames>', columns,'</VariableNames>
</TransferVariableCollection>
</VariableCollections>
<FilterExpression>', filterExp, '</FilterExpression>
</dataTransferDef>
</GetData>
</soap:Body>
</soap:Envelope>'
, sep="")
capture.output(
#with_verbose(
xmlResponse <- POST(url = url,
body = body, content_type("text/xml"),
add_headers(SoapAction = url)
)
#)
)
surveyXml <- content(xmlResponse)
surveyXml
library("httr")
library(XML)
library(htmltools)
key <- confirmit.login(myusername, mypassword, environment)
url = paste("https://ws.",environment,".confirmit.com/confirmit/webservices/current/DataTransfer.asmx", sep="")
body = paste('<soap:Envelope ',soapSchemas, confirmitSchema85, '>
<soap:Header/>
<soap:Body>
<GetData>
<key>',key,'</key>
<dataTransferDef xsi:type="SurveyDataTransferDef">
<ProjectId>',surveyid, '</ProjectId>
<DbType>Production</DbType>
<VariableCollections>
<TransferVariableCollection>
<LoopId>responseid</LoopId>
<VariableNames>', columns,'</VariableNames>
</TransferVariableCollection>
</VariableCollections>
<FilterExpression>', filterExp, '</FilterExpression>
</dataTransferDef>
</GetData>
</soap:Body>
</soap:Envelope>'
, sep="")
capture.output(
#with_verbose(
xmlResponse <- POST(url = url,
body = body, content_type("text/xml"),
add_headers(SoapAction = url)
)
#)
)
surveyXml <- content(xmlResponse)
surveyXml
doc <- xmlParse(surveyXml)
doc
library("httr")
library(XML)
library(htmltools)
key <- confirmit.login(myusername, mypassword, environment)
key
source("Login.R")
source("SurveyData.R")
columns = "<string>Chat_Feedback</string>
<string>Chat_Verbatim</string>
<string>Promotion_Name</string>
<string>Game_Name</string>
<string>ChatMulti</string>"
surveyData = confirmit.getData(columns, "NOT ISNULL(Chat_Feedback)")
surveyData
surveyData
# You can optionally create a filter expression to restrict the number of records returned
filter = "NOT ISNULL(Chat_Feedback)"
# Get default survey data, according to columns and filter specified
surveyData <- confirmit.getData(columns, filter)
library(htmltools)
source("Login.R")
key <- htmlEscape(confirmit.login(myusername, mypassword, environment))
!is.null(key)
myusername = "api_richardm" # "YOUR_API_USERNAME"
mypassword = "P@55w0rdAPI" #"YOU_API_PASSWORD"
surveyid = "p45842187" #"YOUR_SURVEY_PID" # My Test Survey
environment = "nordic"
# Database Designer params
promotionNameTableId = 3308
promotionLabel = "Promotion_Name_Label"
gameNameTableId = 3307
gameLabel = "Game Name Label"
pageCount = 350
#Don't Change below
soapSchemas = ' xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/"'
confirmitSchema = ' xmlns="http://firmglobal.com/Confirmit/webservices/"'
confirmitSchema85 = ' xmlns="http://firmglobal.com/Confirmit/webservices/8.5/"'
myusername = "api_richardm" # "YOUR_API_USERNAME"
mypassword = "P@55w0rdAPI" #"YOU_API_PASSWORD"
surveyid = "p45842187" #"YOUR_SURVEY_PID" # My Test Survey
environment = "nordic"
# Database Designer params
promotionNameTableId = 3308
promotionLabel = "Promotion_Name_Label"
gameNameTableId = 3307
gameLabel = "Game Name Label"
pageCount = 350
#Don't Change below
soapSchemas = ' xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/"'
confirmitSchema = ' xmlns="http://firmglobal.com/Confirmit/webservices/"'
confirmitSchema85 = ' xmlns="http://firmglobal.com/Confirmit/webservices/8.5/"'
library(htmltools)
source("Login.R")
key <- htmlEscape(confirmit.login(myusername, mypassword, environment))
!is.null(key)
myusername = "api_richardm" # "YOUR_API_USERNAME"
mypassword = "P@55w0rdAPI" #"YOU_API_PASSWORD"
surveyid = "p45842187" #"YOUR_SURVEY_PID" # My Test Survey
environment = "nordic"
# Database Designer params
promotionNameTableId = 3308
promotionLabel = "Promotion_Name_Label"
gameNameTableId = 3307
gameLabel = "Game Name Label"
pageCount = 350
#Don't Change below
soapSchemas = ' xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/"'
confirmitSchema = ' xmlns="http://firmglobal.com/Confirmit/webservices/"'
confirmitSchema85 = ' xmlns="http://firmglobal.com/Confirmit/webservices/8.5/"'
myusername = "api_richardm"
myusername = "api_richardm"
library(htmltools)
source("Login.R")
key <- htmlEscape(confirmit.login(myusername, mypassword, environment))
!is.null(key)
library(htmltools)
source("Login.R")
key <- htmlEscape(confirmit.login(myusername, mypassword, environment))
!is.null(key)
source("Login.R")
source("SurveyData.R")
columns = "<string>Chat_Feedback</string>
<string>Chat_Verbatim</string>
<string>Promotion_Name</string>
<string>Game_Name</string>
<string>ChatMulti</string>"
surveyData = confirmit.getData(columns, "NOT ISNULL(Chat_Feedback)")
surveyData
source("Login.R")
source("SurveyData.R")
columns = "<string>Chat_Feedback</string>
<string>Chat_Verbatim</string>
<string>Promotion_Name</string>
<string>Game_Name</string>
<string>ChatMulti</string>"
surveyData = confirmit.getData(columns, "NOT ISNULL(Chat_Feedback)")
head(surveyData)
source("Login.R")
source("QuestionDetails.R")
source("SurveyData.R")
source("DatabaseDesigner.R")
# LIST all columns you would like returned else set columns = "" to return all
columns = "<string>Chat_Feedback</string>
<string>Chat_Verbatim</string>
<string>Promotion_Name</string>
<string>Game_Name</string>
<string>ChatMulti</string>"
# Database Designer params
promotionNameTableId = 3308
promotionLabel = "Promotion_Name_Label"
gameNameTableId = 3307
gameLabel = "Game Name Label"
pageCount = 350
# You can optionally create a filter expression to restrict the number of records returned
filter = "NOT ISNULL(Chat_Feedback)"
# Get default survey data, according to columns and filter specified
surveyData <- confirmit.getData(columns, filter)
# Get details of a SINGLE question type e.g Chat_Feedback
ChatFeedbackDetails = confirmit.getQuestionLabels("Chat_Feedback")
# Merge the resulting sets of data
dfWithLabels = merge(x = surveyData, y = ChatFeedbackDetails, by.x = "Chat_Feedback",
by.y = "Chat_Feedback_code", all.x = TRUE)
# You may need to repeat the above 2 for each SINGLE question needed
# Get Promotion list from Database Designer
promotionNames <- databaseDesigner.getContent(promotionNameTableId, promotionLabel, pageCount)
dfWithLabels = merge(x = dfWithLabels, y = promotionNames, by.x = "Promotion_Name",
by.y = "Id", all.x = TRUE)
# Get Game list from Database Designer
gameNames <- databaseDesigner.getContent(gameNameTableId, gameLabel, pageCount)
dfWithLabels = merge(x = dfWithLabels, y = gameNames, by.x = "Game_Name",
by.y = "Id", all.x = TRUE)
# Optionally, reorder the columns
#dfWithLabels = dfWithLabels[,c(1,ncol(dfWithLabels),3:ncol(dfWithLabels) - 1)]
View(dfWithLabels)
source("Login.R")
source("QuestionDetails.R")
source("SurveyData.R")
source("DatabaseDesigner.R")
# LIST all columns you would like returned else set columns = "" to return all
columns = "<string>Chat_Feedback</string>
<string>Chat_Verbatim</string>
<string>Promotion_Name</string>
<string>Game_Name</string>
<string>ChatMulti</string>"
# You can optionally create a filter expression to restrict the number of records returned
filter = "NOT ISNULL(Chat_Feedback)"
# Get default survey data, according to columns and filter specified
surveyData <- confirmit.getData(columns, filter)
# Get details of a SINGLE question type e.g Chat_Feedback
ChatFeedbackDetails = confirmit.getQuestionLabels("Chat_Feedback")
# Merge the resulting sets of data
dfWithLabels = merge(x = surveyData, y = ChatFeedbackDetails, by.x = "Chat_Feedback",
by.y = "Chat_Feedback_code", all.x = TRUE)
# You may need to repeat the above 2 for each SINGLE question needed
# Get Promotion list from Database Designer
promotionNames <- databaseDesigner.getContent(promotionNameTableId, promotionLabel, pageCount)
dfWithLabels = merge(x = dfWithLabels, y = promotionNames, by.x = "Promotion_Name",
by.y = "Id", all.x = TRUE)
# Get Game list from Database Designer
gameNames <- databaseDesigner.getContent(gameNameTableId, gameLabel, pageCount)
dfWithLabels = merge(x = dfWithLabels, y = gameNames, by.x = "Game_Name",
by.y = "Id", all.x = TRUE)
# Optionally, reorder the columns
#dfWithLabels = dfWithLabels[,c(1,ncol(dfWithLabels),3:ncol(dfWithLabels) - 1)]
View(dfWithLabels)
source("Login.R")
source("QuestionDetails.R")
source("SurveyData.R")
source("DatabaseDesigner.R")
# LIST all columns you would like returned else set columns = "" to return all
columns = "<string>Chat_Feedback</string>
<string>Chat_Verbatim</string>
<string>Promotion_Name</string>
<string>Game_Name</string>
<string>ChatMulti</string>"
# You can optionally create a filter expression to restrict the number of records returned
filter = "NOT ISNULL(Chat_Feedback)"
# Get default survey data, according to columns and filter specified
surveyData <- confirmit.getData(columns, filter)
# Get details of a SINGLE question type e.g Chat_Feedback
ChatFeedbackDetails = confirmit.getQuestionLabels("Chat_Feedback")
# Merge the resulting sets of data
dfWithLabels = merge(x = surveyData, y = ChatFeedbackDetails, by.x = "Chat_Feedback",
by.y = "Chat_Feedback_code", all.x = TRUE)
# You may need to repeat the above 2 for each SINGLE question needed
# Get Promotion list from Database Designer
promotionNames <- databaseDesigner.getContent(promotionNameTableId, promotionLabel, pageCount)
dfWithLabels = merge(x = dfWithLabels, y = promotionNames, by.x = "Promotion_Name",
by.y = "Id", all.x = TRUE)
# Get Game list from Database Designer
gameNames <- databaseDesigner.getContent(gameNameTableId, gameLabel, pageCount)
dfWithLabels = merge(x = dfWithLabels, y = gameNames, by.x = "Game_Name",
by.y = "Id", all.x = TRUE)
source("Login.R")
source("SurveyData.R")
columns = "<string>Chat_Feedback</string>
<string>Chat_Verbatim</string>
<string>Promotion_Name</string>
<string>Game_Name</string>
<string>ChatMulti</string>"
surveyData = confirmit.getData(columns, "NOT ISNULL(Chat_Feedback)")
head(surveyData)
source("Login.R")
source("SurveyData.R")
# columns = "<string>Chat_Feedback</string>
#            <string>Chat_Verbatim</string>
#            <string>Promotion_Name</string>
#            <string>Game_Name</string>
#            <string>ChatMulti</string>"
# surveyData = confirmit.getData(columns, "NOT ISNULL(Chat_Feedback)")
# head(surveyData)
columns = "<string>q1</string>"
surveyData = confirmit.getData(columns, "")
head(surveyData)
source("Login.R")
source("SurveyData.R")
# columns = "<string>Chat_Feedback</string>
#            <string>Chat_Verbatim</string>
#            <string>Promotion_Name</string>
#            <string>Game_Name</string>
#            <string>ChatMulti</string>"
# surveyData = confirmit.getData(columns, "NOT ISNULL(Chat_Feedback)")
# head(surveyData)
columns = "<string>q1</string>"
surveyData = confirmit.getData(columns, "")
head(surveyData)
library(htmltools)
source("Login.R")
key <- htmlEscape(confirmit.login(myusername, mypassword, environment))
!is.null(key)
source("Login.R")
source("QuestionDetails.R")
details = confirmit.getQuestionLabels("Chat_Feedback")
details
source("Login.R")
source("SurveyData.R")
# columns = "<string>Chat_Feedback</string>
#            <string>Chat_Verbatim</string>
#            <string>Promotion_Name</string>
#            <string>Game_Name</string>
#            <string>ChatMulti</string>"
# surveyData = confirmit.getData(columns, "NOT ISNULL(Chat_Feedback)")
# head(surveyData)
columns = "<string>q1</string>"
surveyData = confirmit.getData(columns, "")
head(surveyData)
source("Login.R")
source("QuestionDetails.R")
details = confirmit.getQuestionLabels("Chat_Feedback")
details
